//! State storage definitions

use async_trait::async_trait;
use uuid::Uuid;

/// `StateStorage` is a trait that defines the interface for storing and retrieving
/// the state of a `Projection`.
#[async_trait]
pub trait StateStoreBackend<S> {
    /// The type of error generated by this store
    type Error: std::error::Error + Send + Sync + 'static;
    /// Retrieves the state for a given ID.
    async fn get_state(&self, id: Uuid) -> Result<Option<S>, Self::Error>;
    /// Persists the state for a given ID.
    async fn persist_state(&mut self, id: Uuid, state: S) -> Result<(), Self::Error>;
    /// Deletes the state for a given ID.
    async fn delete_state(&mut self, id: Uuid) -> Result<(), Self::Error>;
}
